#include<stdio.h>
#include<stdio.h>
// defining what is true or false
#define TRUE 1
#define FALSE 0

// initializing my functions
char base();
int get();
int blankx();
int blanky();


int main(void){
    // initializing the blannn peice of the puzzle
    char null[] =" --------- .|000000000|.|000000000|.|000000000|. --------- .";
   // initializing the display of the puzzle "0" is the one telling where the blank space is in the puzzle
   //         x =     0          1          2                 y
   char base[]=" --------- . --------- . --------- \n"
               "|         |.|         |.|000000000|\n"
               "|   {*}   |.|  _____  |.|000000000|\n"      // 0
               "|         |.| |     | |.|000000000|\n"
               " --------- . --------- . --------- \n"
               " --------- . --------- . --------- \n"
               "|         |.| |     | |.|         |\n"
               "|  ||||||||.|||     |||.||||||||  |\n"      // 1
               "|   |||||||.|||     |||.|||||||   |\n"
               " --------- . --------- . --------- \n"
               " --------- . --------- . --------- \n"
               "|       |||.|||     |||.|||       |\n"
               "|        -|.|---------|.|-        |\n"      // 2
               "|         |.|         |.|         |\n"
               " --------- . --------- . --------- \n";

    // a copy of the base that have "." not \n so that it doesnt get buggy
    char cbase[]=" --------- . --------- . --------- ."
               "|         |.|         |.|000000000|."
               "|         |.|  _____  |.|000000000|."
               "|         |.| |     | |.|000000000|."
               " --------- . --------- . --------- ."
               " --------- . --------- . --------- ."
               "|         |.| |     | |.|         |."
               "|  ||||||||.|||     |||.||||||||  |."
               "|   |||||||.|||     |||.|||||||   |."
               " --------- . --------- . --------- ."
               " --------- . --------- . --------- ."
               "|       |||.|||     |||.|||       |."
               "|        -|.|---------|.|-        |."
               "|         |.|         |.|         |."
               " --------- . --------- . --------- .";
    // a copy of that copy
    // making moving the puzzle a little easier to code
    char cbase1[get(cbase)];
    for (int i=0;i <= get(cbase);i++){
        cbase1[i]=cbase[i];
    }
    //

    /*
     initialization of all of my variables
     the x, y variables are the most important variable here becasue it can tell where
     the player is and tells my algorithm to change the positions
     of my characters where it is needed to
    */

    int x_=0,x=0, px,py;
    int y_=0,y=0,nb;
    int j=0,k=0;
    int fix = 0;
    char move[]="\0";
    // printing the base
    printf("\n%s\n",base);


    // a loop so that the player can move infinitely until the puzzle is complete
    while(1==1){
        // how many characters are there in the base variable
        nb=get(base);
        // finding x and y azis of the blank space
        // i made the function blank_x and blank_y for that reason
        // then storing them to position or px and py so that it can be read use effeciently
        px= blankx(base); py = blanky(base);
        // user input
        scanf("%c",&move);
        // printing the outcome of the player
        printf("\n%s\n",base);

        // scanning the user input
        switch (move[0]){
            // if w ,up
            case 'w':
                // a loop for replacing the characters in the base
                for(int i=0;i<=nb; i++){
                    // finding the position of the blank space and moving it up
                    if ( x == px-1 && y == py){
                        // changing the psotiong of the blank space, so if the position of the blank space is
                        // (1-1,1) or (0,1) the postion above it
                        cbase[i] = null[j];
                        //  180 is the number of characters, if i want to replace the previously blank space
                        // if the base array has no more position to go, break it and dont change it
                        if (cbase[i+180]==FALSE){break;}
                        // because you change the copied base you need another variable that is a complete copy
                        // of that variable to replace, so that it wont be buged like cbase1
                        cbase[i+180] = cbase1[i];
                        // after changing the copied base, you also need to replace cbase1
                        cbase1[i+180] = cbase[i+180];
                        cbase1[i] = null[j];
                        j++;
                    }

                    // the algorithm for x and y axis
                    if (base[i]== '.'){
                        y++;
                    }
                    if (base[i]== '\n'){
                        x_++;
                        y-=2;
                    if (x_ == 5){
                    x++;
                    x_=0;}
                    }
                }
                // returning them into 0 again so that it can be used again in the next move then breaking
                x = 0; y=0;x_=0; j=0;k=0;
                break;

            // down
            case 's':
                for(int i=0;i<=nb; i++){
                        // change is (px+1) so if (1,1) == (1+1,1)
                    if ( x == px+1 && y == py){
                        cbase[i] = null[j];
                        // here change is (i-180)
                        if (cbase[i-180]==FALSE){break;}
                        cbase[i-180] = cbase1[i];
                        cbase1[i-180] = cbase[i-180];
                        cbase1[i] = null[j];
                        j++;
                    }


                    if (base[i]== '.'){
                        y++;
                    }
                    if (base[i]== '\n'){
                        x_++;
                        y-=2;
                    if (x_ == 5){
                    x++;
                    x_=0;}
                    }
                }
                x = 0; y=0;x_=0; j=0;k=0;
                break;

            // left
            case 'a':
                for(int i=0;i<=nb; i++){
                    // py - 1 for left
                    if ( x == px && y == py-1){
                        cbase[i] = null[j];
                        // i+12 for left in the character array
                        if (cbase[i+12]==FALSE){break;}
                        cbase[i+12] = cbase1[i];
                        cbase1[i+12] = cbase[i+12];
                        cbase1[i] = null[j];
                        j++;
                    }


                    if (base[i]== '.'){
                        y++;
                    }
                    if (base[i]== '\n'){
                        x_++;
                        y-=2;
                    if (x_ == 5){
                    x++;
                    x_=0;}
                    }
                }
                x = 0; y=0;x_=0; j=0;k=0;
                break;

            // right
            case 'd':
                for(int i=0;i<=nb; i++){
                        // py + 1
                    if ( x == px && y == py+1){
                        cbase[i] = null[j];
                        // i + 12 for right
                        if (cbase[i+12]==FALSE){break;}
                        cbase[i-12] = cbase1[i];
                        cbase1[i-12] = cbase[i-12];
                        cbase1[i] = null[j];
                        j++;
                    }


                    if (base[i]== '.'){
                        y++;
                    }
                    if (base[i]== '\n'){
                        x_++;
                        y-=2;
                    if (x_ == 5){
                    x++;
                    x_=0;}
                    }
                }
                x = 0; y=0;x_=0; j=0;k=0;
                break;
        }
        //restructuring all the chararacter arrays and putting them into
        // the original base variable, changing cbase so that the 2nd "." will
        // turn into "\n" so that it can be readable
        for(fix=0;fix<=nb;fix++){
            if (cbase[fix] == '.'){
                x++;}
            if (cbase[fix] == '.' && x == 3){
                cbase[fix] = '\n';
                x=0;
            }
            base[fix] = cbase[fix];
        }
        for(fix=0;fix<=nb;fix++){
            cbase[fix] = cbase1[fix];
        }
        for(fix=0;fix<=nb;fix++){
            cbase1[fix] = cbase[fix];
        }

    }
}




// function to find the blank space for x axis
int blankx(self)
    char self[];
{
    int i,x=0,y=0,y_=0,x_=0;
    for ( i = 0; self[i] != '0' ; i++){
        if (self[i]== '.'){
            y++;
        }
        if (self[i]== '\n'){
            x_++;
            y-=2;
        if (x_ == 5){
        x++;
        x_=0;}
        }
    }
    return x;
}






// function to find the blank space for y axis
int blanky(self)
    char self[];
{
    int i,x=0,y=0,y_=0,x_=0;
    for ( i = 0; self[i] != '0' ; i++){
        if (self[i]== '.'){
            y++;
        }
        if (self[i]== '\n'){
            x_++;
            y-=2;
        if (x_ == 5){
        x++;
        x_=0;}
        }
    }
    return y;
}


// how many characters are inside the array
int get(self)
    char self[];
{
    int i;
    for ( i = 0; self[i]; i++);
        return i;
}

    int i;
    for ( i = 0; self[i]; i++);
        return i;
}
