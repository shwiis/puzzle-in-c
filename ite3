
#include<stdio.h>
#include<stdio.h>
// defining what is true or false
#define TRUE 1
#define FALSE 0

// initializing my functions
char base();
int get();
int blankx();
int blanky();


int main(void){

    // initializing the blank peice of the puzzle
    char null[] =" --------- ."
                 "|000000000|."
                 "|000000000|."
                 "|000000000|."
                 " --------- .";
   // initializing the display of the puzzle
   //         x =     0          1          2                 y
    char base[]=" --------- . --------- . --------- \n"
               "|||     |||.|         |.|000000000|\n"
               "|||     |||.||||||||  |.|000000000|\n"      // 0
               "|---------|.|||||||   |.|000000000|\n"
               " --------- . --------- . --------- \n"
               " --------- . --------- . --------- \n"
               "|         |.| |     | |.|       |||\n"
               "|  ||||||||.|||     |||.|        -|\n"      // 1
               "|   |||||||.|||     |||.|         |\n"
               " --------- . --------- . --------- \n"
               " --------- . --------- . --------- \n"
               "|||       |.|         |.|         |\n"
               "|-        |.|   {*}   |.|  _____  |\n"      // 2
               "|         |.|         |.| |     | |\n"
               " --------- . --------- . --------- \n";


    // a copy of the base it has '.' so that it can be easily be manipulated by the compiler
    char cbase[]=  " --------- . --------- . --------- ."
                   "|||     |||.|         |.|000000000|."
                   "|||     |||.||||||||  |.|000000000|."      // 0
                   "|---------|.|||||||   |.|000000000|."
                   " --------- . --------- . --------- ."
                   " --------- . --------- . --------- ."
                   "|         |.| |     | |.|       |||."
                   "|  ||||||||.|||     |||.|        -|."      // 1
                   "|   |||||||.|||     |||.|         |."
                   " --------- . --------- . --------- ."
                   " --------- . --------- . --------- ."
                   "|||       |.|         |.|         |."
                   "|-        |.|   {*}   |.|  _____  |."      // 2
                   "|         |.|         |.| |     | |."
                   " --------- . --------- . --------- .";


    // a copy of that copy
    // making moving the puzzle a little easier to code
    int nb = get(base); // how many the charactersof the base variable and storing it in the nb variable
    char cbase1[nb]; // initializing the limit of the cbase1 variable
    // by using for loop we can append the cbase1 variable and coppying all the characters of the copied base(cbase)
    for (int i=0;i <= get(cbase);i++){
        cbase1[i]=cbase[i]; //
    }

    // the correct arrangement of the puzzle
    char og[]=             " --------- . --------- . --------- \n"
                           "|         |.|         |.|000000000|\n"
                           "|   {*}   |.|  _____  |.|000000000|\n"
                           "|         |.| |     | |.|000000000|\n"
                           " --------- . --------- . --------- \n"
                           " --------- . --------- . --------- \n"
                           "|         |.| |     | |.|         |\n"
                           "|  ||||||||.|||     |||.||||||||  |\n"
                           "|   |||||||.|||     |||.|||||||   |\n"
                           " --------- . --------- . --------- \n"
                           " --------- . --------- . --------- \n"
                           "|       |||.|||     |||.|||       |\n"
                           "|        -|.|||     |||.|-        |\n"
                           "|         |.|---------|.|         |\n"
                           " --------- . --------- . --------- \n";
    //
    int stop = 1; // this is a variable that lets me stop the while loop
    int x; // x position, counter for the '\n'
    int y_,y; // y positon, counter for the '.'
    int j; // for the null characters to get duplicated

    // printing the base
    printf("\n%s\n",base);

    while(1<=stop){
        // so that everytime the user change the position of each pieces it can be copied to the other base variables
        for(int i=0;i<=nb;i++){
            // this loop is so that the compiler can copy cbase to the base variable so that it can display
            // and completely change the base variable for the user
                if (cbase[i] == '.'){x++;}
                if (cbase[i] == '.' && x == 3){
                    cbase[i] = '\n';// changing all the '.' of cbase into '\n' so that the compiler can display the
                                    // base variable properly
                    x=0;
                    }
                base[i] = cbase[i]; // coppying the characters of the cbase into the base variable
            }
            // then coppying the cbase1 to cbase, because the compiler change its contents it needs to
            // be change again to its original contents via using the copy of it.
            for(int i=0;i<=nb;i++){
                cbase[i] = cbase1[i];
            }
        //

        char move; // User input variable
        int px= blankx(base); // the x position of the blank piece in the base variable
        int py = blanky(base); // the y position of the blank piece in the base variable
        // user input
        scanf("%c",&move);
        printf("\n%s\n",base); // display the base


        // switch statements for the movements of the blank piece
        switch (move){

            case 'w': // to move the blank piece up
                // a for loop to change the characters inside the variable we want
                for(int i=0;i<=nb; i++){
                    if ((py-1)==-1){break;} // if you cant move the blank piece up break the loop

                    // the compiler are changing the characters inside the copied base(cbase) variable by cbase[i]
                    // if (x,y) axis and (px,py-1)axis are exactly the same we change the cbase[i] to null, the blank peice
                    if ( x == px && y == py-1){
                        cbase[i] = null[j]; // copied base(cbase) variable in the (px,py-1) axis will become the blank piece(null)
                        // the exchange of characters for each base variables
                        cbase[i+180] = cbase1[i];
                        cbase1[i+180] = cbase[i+180];
                        // this will be explain more in the docs contents
                        cbase1[i] = null[j]; // we also change the copied cbase(cbase1) to a blank piece
                        j++; // the incrementation of j so that the compiler can copy all its characters to
                             // where it want it to
                    }

                    // the algorithm for x and y axis, if base[i] and the character inside it
                    //is equal to '.' increment the x var
                    if (base[i]== '.'){
                        x++;}
                    if (base[i]== '\n'){ // if its a '\n' character x = 0 and then increment y_ variable
                        y_++;
                        x=0;
                    if (y_ == 5){ // then if the y_ is equal to 5, increment the actual y variable
                        y++;    // it is 5 because this is the size of one puzzle piece in each grid
                        y_=0;} // restarting y_
                    }// we do this so that it is more easier to group what is inside one of the puzzle pieces
                }
                y = 0; x=0;y_=0; j=0;// restarting the state of all the variables back the way they are so that they can be use again
                break;

            // down
            case 's':
                for(int i=0;i<=nb; i++){
                        // 3 is the limit of the size of the puzzle
                    if ((py+1)==3){break;}
                    if ( x == px && y == py+1){
                        cbase[i] = null[j];
                        cbase[i-180] = cbase1[i];
                        cbase1[i-180] = cbase[i-180];
                        cbase1[i] = null[j];
                        j++;
                    }


                    if (base[i]== '.'){
                        x++;}
                    if (base[i]== '\n'){
                        y_++;
                        x=0;
                    if (y_ == 5){
                        y++;
                        y_=0;}
                    }
                }
                y = 0; x=0;y_=0; j=0;
                break;

            // left
            case 'a':
                for(int i=0;i<=nb; i++){
                    if ((px-1)==-1){break;}
                    if ( x == px-1 && y == py){
                        cbase[i] = null[j];
                        cbase[i+12] = cbase1[i];
                        cbase1[i+12] = cbase[i+12];
                        cbase1[i] = null[j];
                        j++;
                    }


                    if (base[i]== '.'){
                        x++;}
                    if (base[i]== '\n'){
                        y_++;
                        x=0;
                    if (y_ == 5){
                        y++;
                        y_=0;}
                    }
                }
                y = 0; x=0;y_=0; j=0;
                break;

            // right
            case 'd':
                for(int i=0;i<=nb; i++){
                    if ((px+1)==3){break;}
                    if ( x == px+1 && y == py){
                        cbase[i] = null[j];
                        cbase[i-12] = cbase1[i];
                        cbase1[i-12] = cbase[i-12];
                        cbase1[i] = null[j];
                        j++;
                    }


                    if (base[i]== '.'){
                        x++;}
                    if (base[i]== '\n'){
                        y_++;
                        x=0;
                    if (y_ == 5){
                        y++;
                        y_=0;}
                    }
                }
                y = 0; x=0;y_=0; j=0;
                break;
            // the stop case
            case 'k':
                // change the stop variable to 0 so that while 1<=1 will be 1<=0
                stop = 0;
                break;
        }

        // the printf to fix the display, by using many \n we can only see the manipulated base variable
        printf("                                                If done Press k\n\n\n\n\n\n\n\n\n\n\n");
    }


            int count; // initializing count
            // checking if the puzzle that has been arrange by the user is coorect
            for (int i=0; i<=get(base);i++){
                if(base[i]!=og[i]){ // checking the base variable that has been manipulated by the user  if it
                                    // has all the same characters as the og varaibles and if t does not, count will
                                    // get incremented
                    count++;
                }
            }
            if(count==0){ // checking if the count count has been incremented and if does not then passed
                printf("PASSED\n%s\n%s",base, og);
            }else{printf("Failed\n%s\n%s",base, og);} // else if it has been incremented failed

}




// Functions


int blankx(self)
    char self[];
{
    int i,x=0,y=0,y_=0,x_=0;
    for ( i = 0; self[i] != '0' ; i++){
        if (self[i]== '.'){
            x++;
        }
        if (self[i]== '\n'){
            y_++;
            x=0;
        if (y_ == 5){
            y++;
            y_=0;}
        }
    }
    return x;
}
int blanky(self)
    char self[];
{
    int i,x=0,y=0,y_=0,x_=0;
    for ( i = 0; self[i] != '0' ; i++){
        if (self[i]== '.'){
            x++;
        }
        if (self[i]== '\n'){
            y_++;
            x=0;
        if (y_ == 5){
            y++;
            y_=0;}
        }
    }
    return y;
}

int get(self)
    char self[];
{
    int i;
    for ( i = 0; self[i]; i++);
        return i;
}
    int i;
    for ( i = 0; self[i]; i++);
        return i;
}
